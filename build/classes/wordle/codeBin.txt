        /* Is this overkill? As it uses more memory space? But its more scalable
        HashMap<Integer, Color[]> mapColorsToStates = new HashMap<>();
        mapColorsToStates.put(model.NO_STATE, new Color[]{Color.BLACK,Color.LIGHT_GRAY});
        mapColorsToStates.put(model.GREY_STATE, new Color[]{Color.WHITE,Color.DARK_GRAY});
        mapColorsToStates.put(model.GREEN_STATE, new Color[]{Color.WHITE,GREEN});
        mapColorsToStates.put(model.YELLOW_STATE, new Color[]{Color.WHITE,YELLOW});
        for (int Color_STATE : mapColorsToStates.keySet()) {
            if(state == Color_STATE){
                key.setForeground(mapColorsToStates.get(Color_STATE)[0]);
                key.setBackground(mapColorsToStates.get(Color_STATE)[1]);
            }
        }*/

// Old version of Guess Fields, i decided to use Labels instead as the font has Anti-Aliasing(Smooth edges of font)
/*

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wordle;

/**
 *
 * @author Ajmal
 */

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Stroke;
import javax.swing.JPanel;



/**
 *
 * @author Ajmal
 */
public class GuessPanel extends JPanel {
    private WModel model;
    private final Dimension COLOR_PANEL_SIZE;
    protected int width = 50, height = 50;
    protected int borderThickness = 3;
    protected int fontSize = 25;
    int gap = 5;
    
    
    public GuessPanel(WModel model, Dimension panelSize){
        this.model = model;
        this.COLOR_PANEL_SIZE = panelSize;
    
    }
    
    @Override
    public Dimension getMinimumSize(){
        return getPreferredSize();
    }
    @Override
    public Dimension getMaximumSize(){
        return getPreferredSize();
    }
    
    @Override
    public Dimension getPreferredSize(){
        return COLOR_PANEL_SIZE;
    }
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        String text = "W";
        int x = -5;
        int y = 150;
        paintSquare(g,x+gap*1+width*1,y,"H");
        paintSquare(g,x+gap*2+width*2,y,"E");
        paintSquare(g,x+gap*3+width*3,y,"L");
        paintSquare(g,x+gap*4+width*4,y,"L");
        paintSquare(g,x+gap*5+width*5,y,"O");
        
    }
    public void setText(String s){
        
    }
    private void paintSquare(Graphics g,int x, int y, String text){
        Graphics2D g2 = (Graphics2D)g;
        Stroke oldStroke = g2.getStroke();
        
        if(false){
            g2.setColor(Color.LIGHT_GRAY);
            g2.fillRect(x - width / 2, y - height / 2,
            width, height);
        }
        else{
            g2.setStroke(new BasicStroke(borderThickness));
            g2.setColor(Color.LIGHT_GRAY);
            g2.drawRect(x - width / 2, y - height / 2,
                width, height);
            g2.setStroke(oldStroke);
        }
        g2.setColor(Color.BLACK);
        g2.setFont(new Font("Sans", Font.BOLD, fontSize)); 
        FontMetrics fm = g.getFontMetrics();
        double textWidth = fm.getStringBounds(text, g).getWidth();
        g.drawString(text, (int) (x - textWidth / 2),
            (int) (y + fm.getMaxAscent() / 2));
    }
}



*/